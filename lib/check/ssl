#!/bin/bash

DESCRIPTION="perform ssl verifications (ssl expiration, domain matching, ...)"

init() {
    SSL_CONNECTIONS=()
    SSL_PREVENTION_EXPIRATION=30
}

run() {

    if [ ${#SSL_CONNECTIONS[@]} == 0 ]
    then
        abort "no ssl check to perform"
        return $CHECK_DISABLED
    fi

    if ! which openssl >/dev/null
    then
        alert "openssl not found (fix via: apt-get install openssl)"
        return $CHECK_IMPOSSIBLE
    fi

    RETURN=$CHECK_SUCCESS

    # FIXME add way to check certificates via starttls
    #openssl s_client -servername ... -starttls imap -crlf -connect mail....:143
    #openssl s_client -servername ... -starttls smtp -crlf -connect mail....:25

    local CONNECTION
    for CONNECTION in "${SSL_CONNECTIONS[@]}"
    do
        local PROTO=$(echo "$CONNECTION" | sed -s 's!://.*!!')
        test "$PROTO" = "$CONNECTION" && PROTO=tls
        local SSLDOMAIN=$(echo "$CONNECTION" | sed -s 's!\([a-z]\+\)://!!')

        local FQDN=$(echo "$SSLDOMAIN" | cut -d : -f 1)
        local PORT=$(echo "$SSLDOMAIN" | cut -d : -f 2)
        test "$FQDN" = "$PORT" && PORT=""

        local CMD=""

        case $PROTO in
            https|tls)
                PORT=${PORT:-443}
                OPENSSL="openssl s_client -connect $FQDN:$PORT -servername $FQDN"
                ;;
            imap)
                PORT=${PORT:-143}
                CMD="QUIT"
                OPENSSL="openssl s_client -starttls imap -crlf -connect $FQDN:$PORT -servername $FQDN"
                ;;
            imaps)
                PORT=${PORT:-993}
                OPENSSL="openssl s_client -connect $FQDN:$PORT -servername $FQDN"
                ;;
            smtp)
                PORT=${PORT:-25}
                CMD="QUIT"
                OPENSSL="openssl s_client -starttls smtp -crlf -connect $FQDN:$PORT -servername $FQDN"
                ;;
            smtps|submission)
                PORT=${PORT:-465}
                OPENSSL="openssl s_client -connect $FQDN:$PORT -servername $FQDN"
                ;;
            *)
                # FIXME
                echo $PROTO not recognized
                exit 255
                ;;
        esac

        explain "checking TLS on $PROTO for $FQDN port $PORT"

        local SSL
        if [ -z "$CMD" ]
        then
            SSL=$($OPENSSL  </dev/null 2>/dev/null | openssl x509 -noout -noout -checkend $((3600*24*$SSL_PREVENTION_EXPIRATION)) -ext subjectAltName | tail -n +2)
        else
            SSL=$(echo $CMD | $OPENSSL 2>/dev/null | openssl x509 -noout -noout -checkend $((3600*24*$SSL_PREVENTION_EXPIRATION)) -ext subjectAltName | tail -n +2)
        fi

        if !( echo $SSL | grep -q "DNS:$FQDN" )
        then
            alert "certificate $FQDN mismatch fqdn (proto: $PROTO, port: $PORT)"
            RETURN=$CHECK_FAILED
        fi

        if ( echo $SSL | grep -q "Certificate will expire" )
        then
            local EXPIRATION=$($OPENSSL </dev/null 2>/dev/null | openssl x509 -noout -enddate | cut -d '=' -f 2 | sed 's/ ..:..:../,/; s/ GMT$//;')
            alert "please renew certificate $FQDN that will expire the $EXPIRATION (less than $SSL_PREVENTION_EXPIRATION days, proto: $PROTO, port: $PORT)"
            RETURN=$CHECK_FAILED
        fi

    done

    return $RETURN
}

