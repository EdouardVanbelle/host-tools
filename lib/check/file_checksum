#!/bin/bash

DESCRIPTION="check specified file checkums"

init() {
    # FILES_CHECKSUM format: <file>:<checksum>[:<digest>] (where digest can be: md5 (default), sha1, sha256, sha512)
    FILES_CHECKSUM=()
}

run() {

    if [ ${#FILES_CHECKSUM[@]} == 0 ]
    then
        abort "no file's checksum to verify"
        return $CHECK_DISABLED
    fi

    local USEOPENSSL=0

    if ! which md5sum >/dev/null
    then
        abort "md5sum and similar not present (on debian: apt-get install coreutils) [will try fallback to openssl]"

        if which openssl > /dev/null
        then
            USEOPENSSL=1
        else
            abort "md5sum (coreutils) nor openssl is present, (on debian: apt-get install openssl) [ignoring test]"
            return $CHECK_IMPOSSIBLE
        fi
    fi

    local RETURN=$CHECK_SUCCESS
    local FILE CHECKSUM DIGEST IGNORED CURRENT_CHECKSUM

    # check containers are running
    for ELEMENT in "${FILES_CHECKSUM[@]}"
    do

        OLDIFS="$IFS"
        IFS=":"
        read FILE CHECKSUM DIGEST <<< "$ELEMENT"
        IFS="$OLDIFS"

        DIGEST=${DIGEST:-md5}

        if [ ! -e "$FILE" ]
        then
            alert "file checksum failed: $FILE does not exists"
            RETURN=$(max $? $RETURN)
            continue
        fi

        if [ $USEOPENSSL -eq 0 ]
        then
            local BINARY=${DIGEST}sum
            if ! which $BINARY >/dev/null
            then
                alert "checksum binary $BINARY not found, cannot test $FILE"
                RETURN=$(max $? $RETURN)
                continue
            fi

            read CURRENT_CHECKSUM IGNORED <<< $($BINARY "$FILE" 2>&1)
        else
            # openssl fallback
            read IGNORED CURRENT_CHECKSUM <<< $(openssl dgst -"$DIGEST" "$FILE" 2>&1)
        fi

        if [ $CURRENT_CHECKSUM == "$CHECKSUM" ]
        then
            echo "file $FILE ${DIGEST}sum success"
        else
            alert "file $FILE ${DIGEST}sum differs (currently '$CURRENT_CHECKSUM', was expecting '$CHECKSUM')"
            RETURN=$(max $? $RETURN)
        fi
    done

    return $RETURN
}

