#!/bin/bash

DESCRIPTION="check for pending git change on a given directory"

init() {
    GIT_DIRECTORIES=()
    return 0
}

run() {

    if [ ${#GIT_DIRECTORIES[@]} -eq 0 ]
    then
        abort "no git repository to check"
        return $CHECK_DISABLED
    fi

    if ! which git >/dev/null
    then
        abort "command git is missing"
        return $CHECK_IMPOSSIBLE
    fi

    local RETURN=$CHECK_SUCCESS

    local OLD_PWD=$PWD
    local GIT_DIR DELTA BRANCH
    for GIT_DIR in ${GIT_DIRECTORIES[@]}
    do
        cd $GIT_DIR

        explain "checking pending changes on $GIT_DIR"

        COMMIT=$(git rev-parse HEAD 2>/dev/null)
        if [ $? -ne 0 ]
        then
            alert "git dir $GIT_DIR does not seem to be tracked by git"
            RETURN=$(max $? $RETURN)
            echo
            continue
        fi

        BRANCH=$(git name-rev --name-only $COMMIT)
        echo "  current branch $BRANCH"

        # get the tracking branch
        TRACKING=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2>/dev/null)

        if [ -z "$TRACKING" ]
        then
            echo "  no tracking branch"
        else
            echo "  tracking branch $TRACKING"

            if [ -e .git ]
            then
                OWNER=$(stat -c '%U' .git)
                # Try to fetch remote name
                REMOTE=${TRACKING%%/*}
                echo "  fetching $REMOTE in $OWNER user"
                su $OWNER -s /bin/sh -c "git fetch $REMOTE"
            fi

            read BEHIND AHEAD <<< $(git rev-list --left-right --count $TRACKING..$BRANCH)
            if [ \( $BEHIND -ne 0 \) -o \( $AHEAD -ne 0 \) ]
            then
                alert "git dir $GIT_DIR branch $BRANCH is $BEHIND commit(s) behind and $AHEAD commit(s) ahead from $TRACKING"
                RETURN=$(max $? $RETURN)
            fi
        fi

        DELTA="$(git status -s -uno | head -n 5)"
        if [ ! -z "$DELTA" ]
        then
            alert "git dir $GIT_DIR has tracked files with pending changed\n$DELTA\n..."
            RETURN=$(max $? $RETURN)
            echo
            continue
        else
            DELTA="$(git status -s | head -n 5)"
            if [ ! -z "$DELTA" ]
            then
                silent_alert "git dir $GIT_DIR has untracked files\n$DELTA\n..."
                RETURN=$(max $? $RETURN)
                echo
                continue
            fi
        fi

        echo "git dir $GIT_DIR is clean and sync"
        echo
    done

    cd $OLD_PWD

    # check if branch is out of date:
    # returns number commits behind and number of commit above
    # git rev-list --left-right --count v1-pre-release..master

    # check if a commit is on a tag
    # git name-rev --tags --name-only $(git rev-parse HEAD)

    # get the current branch name
    # git name-rev --name-only $(git rev-parse HEAD)

    return $RETURN

}
