#!/bin/bash

DESCRIPTION="verify network errors, collisions"

init() {
    return 0
}

run() {
    echo checking network devices

    if detect_virt
    then
        abort "this is a virtual machine, test is not relevant [ignoring test]"
        return
    fi

    if [ ! -e /sys/class/net ]
    then
        abort "no /sys/class/net found [ignore network check]"
        return
    fi

    local DEVICE
    local current=$(pwd)
    cd /sys/class/net

    for DEVICE in *
    do
        # keep only physical devices
        # FIXME: should check phydev ?
        test -e $DEVICE/device || continue

        explain "checking physical device $DEVICE"

        local IS_UP=$(cat $DEVICE/carrier 2>/dev/null)

        if [ "$IS_UP" != "1" ]
        then
            echo "device $DEVICE is not connected"
            # FIXME: check if must be connected
            continue
        fi

        local TX_ERROR=$(cat $DEVICE/statistics/tx_errors)
        local RX_ERROR=$(cat $DEVICE/statistics/rx_errors)
        local COLLISION=$(cat $DEVICE/statistics/collisions)

       # volatile_cache KEY TTL_IN_H DEFAULT_VALUE CURRENT_VALUE
       local PREV_TX_ERROR=$(volatile_cache "net:${DEVICE}:tx_error" 24 0 $TX_ERROR)
       local PREV_RX_ERROR=$(volatile_cache "net:${DEVICE}:rx_error" 24 0 $RX_ERROR)
       local PREV_COLLISION=$(volatile_cache "net:${DEVICE}:collision" 24 0 $COLLISION)

        if [ \
            \( $TX_ERROR -gt $PREV_TX_ERROR \) -o \
            \( $RX_ERROR -gt $PREV_RX_ERROR \) -o \
            \( $COLLISION -gt $PREV_COLLISION \) \
        ]
        then
            alert "device $DEVICE has communication errors ($TX_ERROR TX err, $RX_ERROR RX err, $COLLISION collisions)"
        else
            echo "device $DEVICE is in good health: no new error ($TX_ERROR Tx err, $RX_ERROR RX err, $COLLISION collisions)"
        fi

    done

    cd $current
}

