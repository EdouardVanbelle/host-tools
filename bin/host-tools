#!/bin/bash

# --------------------------- default config

# setup it into /etc/host-tools.conf

DISKLIMIT=75
BADSECTORLIMIT=0
ALLOW_ROOT_PASWORD="NO"
MANDATORY_SERVICES=("ssh.service")
MANDATORY_DOCKERS=()
MANDATORY_FILES=()
MANDATORY_PACKAGES=("openssh-server")
FORBIDDEN_PACKAGES=()
SILENT_RAID=()
SILENT_BADSECTOR=()
SILENT_HOSTDOWN=()
SILENT_DOCKER_NEEDUPGRADE=()
SILENT_SERVICES=()
SSL_CONNECTIONS=()
SSL_PREVENTION_EXPIRATION=30
ROOT_KEYS=()
WEBHOOK=""
DOMAIN=""
HOSTS=()

# ----------------------------------------


CONFIG="/etc/host-tools.conf"
REPORT="/var/run/host-tools.report"
LOCK="/var/run/host-tools.lock"
HOSTNAME=$(hostname)
SCRIPTNAME=$(basename $0)

ALARM=0
CONFIG_LOADED=0
COMMAND_FOUND=0
NOTIFY=1

# keep original language to normalize script output
LANG=C

# ---------------------------------------- helpers

urlencode() {
    # urlencode <string>
    local old_lc_collate=$LC_COLLATE
    LC_COLLATE="C"
    
    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *)               printf '%%%02X' "'$c" ;;
        esac
    done
    
    LC_COLLATE=$old_lc_collate
}


contains() {
	# usage contains "lookup" "array"
	local lookup=$1

	# match all case

	shift;
	for element in "$@"
	do
	    [ "$element" == "*"       ] && return 0 # considers that '*' match all
	    [ "$element" == "$lookup" ] && return 0
   	done
	return 1

}


alert() {
	ALARM=1
	logger -s -p user.crit -t "$SCRIPTNAME" -- "$*"
	echo "$*" >>$REPORT
}

silent_alert() {
	echo "SILENT ALERT:" "$*"
	echo "$*" >>$REPORT
}

notify() {

	if [ $NOTIFY -eq 0 ]
	then
		echo "Silent mode do not notify: $*"
		return 0
	fi

	local message=$( urlencode "$*")

	if [ -z "$WEBHOOK" ] 
	then
		alert "WEBHOOK not defined, cannot notify"
		return 1
	fi

	if ! which curl >/dev/null
	then

		# fallback to curl
		if which wget >/dev/null
		then
			# fallback to wget
			wget -q -O /dev/null "${WEBHOOK}${message}"
		else
			# neither curl nor wget found, request user to install at least curl
			echo "I will really appreciate that you 'apt install curl' to call your webhook" &>2
			return 1
		fi
	fi

	curl -s -q "${WEBHOOK}${message}" >/dev/null

}

load_config() {

	if ! [ -e $CONFIG ]
	then
		echo "configuration $CONFIG not found"
		return 1
	fi

	if [ "$(stat -c '%u %g' -L $CONFIG)" != "0 0" ]
	then
		echo "SECURITY: $CONFIG must be owner by uid: root group: root" 
		exit 1
	fi

	#expected return: -rw-r--r-- 
	if echo "$(stat -c '%A' -L $CONFIG)" | grep -q '^........w.$'
	then
		echo "SECURITY: $CONFIG cannot be writable by anybody"
		exit 1
	fi

	# load config (XXX: dangerous , can execute arbitrary command)
	source $CONFIG

	CONFIG_LOADED=1
}

lock() {


	exec 200>$LOCK
	if ! flock -n 200
	then
		echo locked
		return 1
	fi

	# will clean up lock at exit
	trap unlock EXIT

}

unlock() {

	# remove  auto cleanup
	trap - EXIT

	rm -f $LOCK

	# close filedescriptor 200
	exec 200>&-

}

# will return all HDD/SSD: sda sdb ...
find_disks() {
        local DISKSMAJORS=""

        while read -r MAJOR TYPE
        do
                if [ "$TYPE" == "sd" ];
                then
                        if [ -z "$DISKSMAJORS" ]
                        then
                                DISKSMAJORS="$MAJOR"
                        else
                                DISKSMAJORS="$DISKSMAJORS|$MAJOR"
                        fi
                fi
        done </proc/devices

        # keep only disks (minor are multiple of 16)
        while read -r MAJOR MINOR LABEL STATS
        do
                if [[ "$MAJOR" =~ ^($DISKSMAJORS)$ ]] && [ $(( $MINOR % 16 )) -eq 0 ]
                then
                        echo $LABEL
                fi

        done </proc/diskstats
}


# ---------------------------------------- checks

check_root_sshkeys() {

	local AUTHORIZED_KEY="/root/.ssh/authorized_keys2"

        local PREV_IFS=$IFS
	IFS="" 
	for KEY in ${ROOT_KEYS[@]}
	do
		local SHORTKEY=$(echo "$KEY" | awk '{ print $1 " ... " $NF }')
		echo "ensure that $SHORTKEY is present for root"
		if ! ( grep -q ^$KEY $AUTHORIZED_KEY )
		then
			alert "$SHORTKEY is missing in $AUTHORIZED_KEY"
		fi
	done
	IFS=$PREV_IFS
}

check_no_root_password() {
	# because I prefer keys

	[ "$ALLOW_ROOT_PASWORD" == "yes"  ] && echo "allow root password" && return
	[ "$ALLOW_ROOT_PASWORD" == "YES"  ] && echo "allow root password" && return
	[ "$ALLOW_ROOT_PASWORD" == "true" ] && echo "allow root password" && return
	[ "$ALLOW_ROOT_PASWORD" == "TRUE" ] && echo "allow root password" && return

	echo "checking no root password"

	local ROOT_PASS=$(getent shadow root | cut -d : -f 2)
	[ "$ROOT_PASS" != "*" ] && alert "this machine has a root password, please use ssh key"
}

check_security_upgrade() {

	echo checking security package to upgrade

        if ! which apt-get >/dev/null
        then
               echo "apt-get not found, I only know debian systems [ignoring test]"
               return
        fi


	apt-get update >/tmp/security-update.list 2>&1
	if grep -q '^[WE]:' /tmp/security-update.list 
	then
		alarm "got warning in apt-get update"
		cat /tmp/security-update.list
	fi

	apt-get upgrade -s >/tmp/security-upgrade.list 2>&1
	if grep -i security /tmp/security-upgrade.list 
	then
		grep -i security /tmp/security-upgrade.list
		alert "system has security packages to upgrade"
	fi

	apt-get clean >/dev/null 2>/dev/null
	#apt-get auto-clean

	rm -f /tmp/security-upgrade.list
	rm -f /tmp/security-update.list
}

check_packages() {

	# FIXME should support alpine with apk
	if ! which dpkg >/dev/null
	then
		echo "dpkg not found, I only know debian distribution [ignoring test]"
		return
	fi

	# check that package are fully installed
	dpkg --audit > /tmp/host-tools.package-audit

	if [ $(wc -l </tmp/host-tools.package-audit) -gt 0 ]
	then
		alert "found partial or unconfigured packages during dpkg audit"
		cat /tmp/host-tools.packages-audit
	fi

	rm -f /tmp/host-tools.package-audit

	if [ ${#MANDATORY_PACKAGES[@]} == 0 ]
        then
               echo "no mandatory package in config"
               return
        fi

	dpkg --get-selections > /tmp/host-tools.package-list

	for PACKAGE in ${MANDATORY_PACKAGES[@]}
	do
		if grep -q "^$PACKAGE\s\+install$" /tmp/host-tools.package-list 
		then
			echo "mandatory package $PACKAGE is installed"
		else
			alert "mandatory package $PACKAGE is missing"
		fi
	done

	for PACKAGE in ${FORBIDDEN_PACKAGES[@]}
	do
		if grep -q "^$PACKAGE\s\+install$" /tmp/host-tools.package-list 
		then
			alert "forbidden package $PACKAGE must be removed/purged"
		fi
	done

	rm -f /tmp/host-tools.package-list
	
}

check_services() {

	echo "checking systemd services status"

        if ! which systemctl >/dev/null
        then
               echo "systemctl not found (system is not running using systemd ?) [ignoring test]"
               return
        fi

	# example of output
	# networking.service loaded    failed failed Raise network interfaces
	# ureadahead.service not-found failed failed ureadahead.service
	while read -r SERVICE LOAD ACTIVE RUN DESCRIPTION
	do
		local do_alert="alert"
		contains "$SERVICE" "${SILENT_SERVICES[@]}" && do_alert=silent_alert

		$do_alert "service $SERVICE warning (loaded=$LOAD active=$ACTIVE run=$RUN)"

	done < <( systemctl --state=failed  --no-pager --no-legend list-units )

	for SERVICE in ${MANDATORY_SERVICES[@]}
	do
		systemctl --no-pager --no-legend list-units "$SERVICE" | { read -r _S LOAD ACTIVE RUN DESCRIPTION
			if [ "$_S" == "" ]
			then
				alert "mandatory service $SERVICE not running (not found)"
			elif [ "$RUN" != "running" ]
			then
				alert "mandatory service $SERVICE not running (loaded=$LOAD active=$ACTIVE run=$RUN)"
			else
				echo "mandatory service $SERVICE is running"
			fi
		}
	done
}

check_disk_sectors() {

        if ! which smartctl >/dev/null
        then
               echo "smartctl not installed (fix: apt-get install smartmontools) [ignoring test]"
               return
        fi

        #if which lshw >/dev/null
        #then
        #       # disk list
        #       DISKS=$(lshw -class disk -short -quiet | tail -n +3 | awk '{ print $2; }')
        #else
        #       echo "lshw not installed get disk list via /dev/disk (better via: apt-get install lshw)"
        #       DISKS=$(readlink -f /dev/disk/by-id/* | grep -e '[a-z]$' | sort | uniq )
        #fi

	# foreach disk
        for DISK in $( find_disks)
	do
		SHORT="${DISK##*/}"
		echo "checking disk $DISK"
		if [ -e "/sys/block/$SHORT/queue/rotational" ]
		then
			if [ $(cat "/sys/block/$SHORT/queue/rotational") == 1 ]
			then
				echo "$DISK seems to be a HDD"
			else
				echo "$DISK seems to be a SSD"
			fi
		else
			echo "$DISK is neither a HDD nor a SSD"
		fi

		# foreach smartctl

		# smartctl 6.6 2017-11-05 r4594 [x86_64-linux-4.19.0-8-amd64] (local build)
		# Copyright (C) 2002-17, Bruce Allen, Christian Franke, www.smartmontools.org
		#
		# === START OF READ SMART DATA SECTION ===
		# SMART Attributes Data Structure revision number: 16
		# Vendor Specific SMART Attributes with Thresholds:
		# ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
		#   1 Raw_Read_Error_Rate     0x000b   100   100   016    Pre-fail  Always       -       0
		#   2 Throughput_Performance  0x0005   136   136   054    Pre-fail  Offline      -       80
		#   3 Spin_Up_Time            0x0007   193   193   024    Pre-fail  Always       -       248 (Average 399)
		#   4 Start_Stop_Count        0x0012   100   100   000    Old_age   Always       -       16
		#   5 Reallocated_Sector_Ct   0x0033   100   100   005    Pre-fail  Always       -       0
		#   7 Seek_Error_Rate         0x000b   100   100   067    Pre-fail  Always       -       0
		#   8 Seek_Time_Performance   0x0005   145   145   020    Pre-fail  Offline      -       24
		#   9 Power_On_Hours          0x0012   095   095   000    Old_age   Always       -       39172
		#  10 Spin_Retry_Count        0x0013   100   100   060    Pre-fail  Always       -       0
		#  12 Power_Cycle_Count       0x0032   100   100   000    Old_age   Always       -       16
		# 192 Power-Off_Retract_Count 0x0032   100   100   000    Old_age   Always       -       16
		# 193 Load_Cycle_Count        0x0012   100   100   000    Old_age   Always       -       16
		# 194 Temperature_Celsius     0x0002   166   166   000    Old_age   Always       -       36 (Min/Max 18/49)
		# 196 Reallocated_Event_Count 0x0032   100   100   000    Old_age   Always       -       0
		# 197 Current_Pending_Sector  0x0022   100   100   000    Old_age   Always       -       0
		# 198 Offline_Uncorrectable   0x0008   100   100   000    Old_age   Offline      -       0
		# 199 UDMA_CRC_Error_Count    0x000a   200   200   000    Old_age   Always       -       0

		while read -r ID ATTRIBUTE_NAME FLAG VALUE WORST THRESH TYPE UPDATED WHEN_FAILED RAW_VALUE
		do
			[ -z "$ATTRIBUTE_NAME" ] && continue
			[ -z "$RAW_VALUE" ] && continue

			# debug echo "$DISK $ATTRIBUTE_NAME $RAW_VALUE" 

			local do_alert="alert"
			contains "$DISK" "${SILENT_BADSECTOR[@]}" && do_alert="silent_alert"

			# source: https://en.wikipedia.org/wiki/S.M.A.R.T.#Known_ATA_S.M.A.R.T._attributes
			case "$ID" in 
				"5")
					#id=5 "Reallocated_Sector_Ct" (bad for HD and SSD)
					echo "INFO: Reallocated Sector Count: $RAW_VALUE"
					[ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE bad sectors";
					;;
				"7")
					#id=5 "Spin_Retry_Count" (bad for HD)
					# https://kb.acronis.com/content/9110
					echo "INFO: Spin Retry Count: $RAW_VALUE"
					# TODO: warn if growing up [ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE spin retry";
					;;

				"187")
					#id=187 "Reported Uncorrectable Errors"	(bad SSD)
					echo "INFO: Reported Uncorrectable Errors: $RAW_VALUE"
					[ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE uncorrectable errors";
					;;

				"188")
					#id=188 "Command Timeout"
                                       RAW_VALUE="${RAW_VALUE%% *}" # remove all YY in "XX YY"
					echo "INFO: Reported command timeout: $RAW_VALUE"
					[ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE command timeout";
					;;

				"196")
					#id=196 "Reallocation Event Count"
					echo "INFO: Reported command timeout: $RAW_VALUE"
					;;

				"197")
					#id=197 "Current_Pending_Sector"
					echo "INFO: Current Pending Sector: $RAW_VALUE"
					[ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE coming bad sectors";
					;;

				"201")
					#id=201	"Soft Read Error Rate"
					# https://kb.acronis.com/content/9137
					RAW_VALUE="${RAW_VALUE%%/*}" # remove all /YY in "XX/YY"
					echo "INFO: Soft read error: $RAW_VALUE"
					# TODO: WARN if growing up [ $RAW_VALUE -gt $BADSECTORLIMIT ] && $do_alert "$DISK has $RAW_VALUE read errors";
					;;

			esac

		done < <( smartctl -A /dev/$DISK 2>/dev/null )
	done
}

check_partition_space() {

	while read -r PARTITION FSTYPE IPCENT PCENT
	do
		IPCENT=${IPCENT%?}
		PCENT=${PCENT%?}

		echo checking partition $PARTITION

		if [ $PCENT -ge $DISKLIMIT ]
		then
			alert "$PARTITION reached size limit: $PCENT %"
		fi

		[ -z "$IPCENT" ] && continue


		if [ $IPCENT -ge $DISKLIMIT ]
		then
			alert "$PARTITION reached inode size limit: $IPCENT %"
		fi

	done < <( df -l --exclude-type="devtmpfs" --exclude-type="tmpfs" --exclude-type="overlay" --output="source,fstype,ipcent,pcent" | tail -n +2 )
}

check_partition_writable() {
	# FIXME: must do it
	true
}

check_docker() {

        if [ ${#MANDATORY_DOCKERS[@]} == 0 ]
        then
               echo "no docker image in config"
               return
        fi

        if ! which docker >/dev/null
        then
               alert "docker not installed (fix: apt-get install docker-ce) [ignoring test]"
               return
        fi

	# check containers are running 
	for INSTANCE in ${MANDATORY_DOCKERS[@]}
	do
		echo checking docker $INSTANCE running
		if [[ $(docker inspect -f '{{.State.Running}}' $INSTANCE 2>/dev/null) != "true" ]]
		then
			alert "container $INSTANCE not running"
		else
			echo checking container $INSTANCE security
			# container is running, check if need upgrade/a rebuilt

			DISTRIBUTION=$(docker container exec $INSTANCE /bin/sh -c 'grep ^ID= /etc/os-release' | cut -d "=" -f 2)

			case $DISTRIBUTION in

				debian)
					echo "$INSTANCE is a debian"

					docker container exec $INSTANCE /bin/sh -c 'apt-get update >/dev/null 2>/dev/null; apt-get upgrade -s; apt-get clean; rm -rf /var/lib/apt/lists/*' >"/tmp/container-$INSTANCE.package-upgrade"
					if grep -i security "/tmp/container-$INSTANCE.package-upgrade"
					then
						local do_alert="alert"
						contains "$INSTANCE" "${SILENT_DOCKER_NEEDUPGRADE[@]}" && do_alert="silent_alert"
						$do_alert "container $INSTANCE need security upgrade (or a rebuild)"
					fi

					rm -f "/tmp/container-$INSTANCE.package-upgrade"

					;;
				alpine)
					echo "$INSTANCE is an alpine (case not implemented)"
					;;
				*)
					alert "$INSTANCE is an unknown distribution ($DISTRIBUTION)"
					;;
			esac


		fi
	done
}

check_last_backup() {
	# FIXME: must do it
	true
}


check_raid() {

	if [ ! -f '/proc/mdstat' ]
	then
		echo "no raid (soft) found ignore test"
		return 0
	fi

	while read -r DEVICE ACTIVE TYPE  STATUS
	do
		# keep only active parition (do we need to check other state ?)
		[ "$ACTIVE" != "active" ] && continue 

		local do_alert="alert"
		contains "$DEVICE" "${SILENT_RAID[@]}" && do_alert="silent_alert"

		if [[ "$STATUS" =~ ^\[U+\]$ ]]
		then
			echo "raid $DEVICE ($TYPE) is clean"
		else
			$do_alert "raid $DEVICE ($TYPE) is degraded"
		fi
	done < <( awk '/^md.*:/{ printf $1 " " $3 " " $4 " "; getline; print $NF}' <'/proc/mdstat')

}

check_mount_points() {

	#FIXME must be dynamic
	# check data mounted
	for DATA in ${PARTITIONS[@]}
	do
		# follow link if necessary
		if [ -L $DATA ] 
		then
			TARGET=$(readlink -f $DATA)
			if [ -z "$TARGET" ]
			then
				alert "wrong symlink $DATA"
				continue
			fi
			DATA=$TARGET
		fi

		mountpoint -q $DATA || alert "$DATA not mounted"
	done

}

check_file_exists() {

	for FILE in ${MANDATORY_FILES[@]}
	do
		echo check that $FILE exists
		[ -e $FILE ] || alert "$FILE does not exist, please check"

	done
}

check_need_reboot() {
	if [ \( -f "/var/run/reboot-required" \) -o \( -f "/var/run/reboot-required.pkgs" \) ]
	then
		alert "system need a reboot"
	fi
}

check_farm() {

	# XXX: this check is supposed to be minimalist, if you are interested in managing famrs, I recommand 'consul' or similar


        if [ -n "$DOMAIN" ]
	then
               if ! which dig 2>/dev/null
               then
                       alert "dig not found, I advise you to 'apt install dnsutils'"
               else
                       echo "discovering $DOMAIN farm using DNS..."
                       for HOST in $(dig +short SRV farm.$DOMAIN | sed 's/^[0-9 ]\+ //; s/\.$//' | sort )
                       do
                               HOSTS+=( $HOST )
                       done
               fi
	fi

	local found=0
        for SERVER in "${HOSTS[@]}"
	do
		echo "checking server $SERVER (ping)"
		found=1

                if [ "$SERVER" == "$HOSTNAME" ]
		then
			echo "I am $SERVER, no need to test :)"
			continue
		fi

		if ping -q -c 3 $SERVER >/dev/null
		then
			echo ping: $SERVER is alive
		else

			local do_alert="alert"
			contains "$SERVER" "${SILENT_HOSTDOWN[@]}" && do_alert="silent_alert"
			$do_alert "no ping answer from $SERVER"
		fi
	done

	if [ $found -eq 0 ]
	then
		alert "SRV farm.$DOMAIN not defined (no discovery)"
	fi
}


check_ssl() {



        if [ ${#SSL_CONNECTIONS[@]} == 0 ]
        then
               echo "no ssl check to perform"
               return
        fi


	if ! which openssl >/dev/null
	then
		alert "openssl not found (fix via: apt-get install openssl)"
		return 1
	fi


	for CONNECTION in ${SSL_CONNECTIONS[@]}
	do
		local FQDN="${CONNECTION%:*}"
		local PORT="${CONNECTION#*:}"
		test -z "$PORT" && PORT=443

		echo checking $FQDN port $PORT

		local SSL=$(openssl s_client -servername $FQDN -host $FQDN -port $PORT </dev/null 2>/dev/null | openssl x509 -noout -noout -checkend $((3600*24*$SSL_PREVENTION_EXPIRATION)) -ext subjectAltName | tail -n +2)

		if !( echo $SSL | grep -q "DNS:$FQDN" ) 
		then
			alert "certificate $FQDN mismatch fqdn"
		fi

		if ( echo $SSL | grep -q "Certificate will expire" ) 
		then
			local EXPIRATION=$(openssl s_client -servername $FQDN -host $FQDN -port $PORT </dev/null 2>/dev/null | openssl x509 -noout -enddate | cut -d '=' -f 2 | sed 's/ ..:..:../,/; s/ GMT$//;')
			alert "please renew certificate $FQDN that will expire the $EXPIRATION (less than $SSL_PREVENTION_EXPIRATION days)"
		fi

	done
}

# ---------------------------------------- commands

cmd_check_list() {
	# execute all check_* functions
	for CHECK in $(compgen -A function | grep ^check_ | sort)
	do
		echo $CHECK
	done

}

cmd_full_check() {

	lock || return 1

	test -e $REPORT && mv $REPORT $REPORT.prev

	# execute all check_* functions
	for CHECK in $(compgen -A function | grep ^check_ | sort)
	do
		echo "== $CHECK =="
		$CHECK
		echo
	done

	if [ "$ALARM" != "0" ] 
	then
		notify "please check $HOSTNAME, last error: $(tail -n 1 $REPORT)"
	else
		logger -s -p user.info -t $SCRIPTNAME -- "full check sucess"
		echo "$SCRIPTNAME full-check success at "$(date) >>$REPORT

		if [ -f $REPORT.prev ]
		then
			if ! ( tail -n 1 $REPORT.prev | grep -q "full-check success" )
			then
				# previous test was a failure, notify that everthing is back to normal
				notify "$HOSTNAME full-check is now successful"
			fi
		fi

	fi

	unlock

}

cmd_install_packages() {

	lock || return 1

	if [ ${#MANDATORY_PACKAGES[@]} == 0 ]
        then
               echo "no mandatory package in config"
	       unlock
               return 1
        fi

        if ! which apt-get >/dev/null
        then
               echo "apt-get not found, I only know debian systems [ignoring command]"
	       unlock
               return 1
        fi

	apt-get install "${MANDATORY_PACKAGES[@]}"

	unlock
}

cmd_notify_alive() {
	notify "${HOSTNAME} is alive"
}

cmd_notify_boot() {
	notify "${HOSTNAME} just boot, please check it"
}

cmd_notify() {
	notify "${HOSTNAME}: $*"
}

cmd_last_report() {

	# FIXME: 'd rather use a temp file while building new report

	echo
	if [ -e $REPORT ]
	then
		cat $REPORT
	else
		echo "please run '$SCRIPTNAME full-check' to have report"
	fi
	echo
}

cmd_backup_etc() {

	if ! which dpkg >/dev/null
	then
		alert "only know debian for now"
		return 1
	fi

	# get path from config
	local DEST=$BACKUP_PATH

	# overwrite path from parameter
	[ ! -z "$1" ] && DEST=$1

	if [ -z "$DEST" ] 
	then
		echo please specify a destination
		return 1
	fi

	echo backup config and package list only of $HOSTNAME to $DEST

	local current=$(pwd)
	cd /

	if ! touch $DEST/.start-backup
	then
		echo cannot write in $DEST
		return 1
	fi
	rm -f $DEST/.start-backup

	# backup /etc
	tar -cf $DEST/etc.tgz etc

	# get packages selections
	dpkg --get-selections >$DEST/dpkg.list

	cd $current
}

cmd_help() {
	cat <<EOF
usage $SCRIPTNAME [options] <command>

options:
	-c|--config <file>	specify config file (default: $CONFIG)
	-r|--report <file>	specify report file (default: $REPORT)
	-s|--silent		mute notifications

command:

	check-list		list check available
	full-check		perform a full host check (use it in cron for periodic check)
	last-report		dump last report from full-check command (ex: use in in /etc/update-motd.d)

	install-packages	install mandatory packages
	backup-etc [<path>]	backup /etc and package list to <path> destination

	notify-alive		notify host is alive (ex: use it in cron for periodic notification)
	notify-boot		notify host just boot (ex: put it in /etc/rc.local)
	notify <message>	send a custom notification

	help 			this help

EOF
}


# ------------------------------------------------------ main

if [ "$UID" != "0" ] 
then 
	echo "must be runned has root"
	exit 1
fi



# read parameters
while [ $# -gt 0 ]
do
	case $1 in
		-c|--config)
			shift
			CONFIG=$1
			echo CONFIG=$CONFIG;
			shift
			;;

		-r|--report)
			shift
			REPORT=$1
			echo REPORT=$CONFIG;
			shift
			;;

		-s|--silent)
			shift
			NOTIFY=0
			;;

		*)
			# no more parameter
			[ $CONFIG_LOADED -eq 0 ] && load_config

			# check if $1 is a command (prepend cmd_ and replace - by _)
			COMMAND=cmd_${1//[-]/_}
			if ( declare -F "$COMMAND" >/dev/null)
			then
				# command exists, execute it giving next parameters
				COMMAND_FOUND=1
				shift
				$COMMAND "$@"
			fi

			# end loop
			break
	esac
done

if [ $COMMAND_FOUND -eq 0 ]
then
	echo "bad syntax"
	cmd_help
	exit 1
fi

exit $ALARM

