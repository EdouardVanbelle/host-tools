#!/bin/bash

WEBHOOK=""

# ----------------------------------------

CONFIG="/etc/host-tools.conf"

VARDIR="/var/lib/host-tools"
test -d $VARDIR || mkdir $VARDIR || echo "warning: unable to create $VARDIR"

# lookup for RUNDIR
RUNDIR="/run" # Recent distrib
test -e $RUNDIR || RUNDIR="/var/run" # Old distribs

TMPDIR="/tmp"

BASEDIR=$(readlink -f $(dirname $0)/..)

HT_RUNDIR="$RUNDIR/host-tools"
test -d $HT_RUNDIR || mkdir $HT_RUNDIR

REPORT="$VARDIR/host-tools.report"
LOCK="$RUNDIR/host-tools.lock"
HOSTNAME=$(hostname)
SCRIPTNAME=$(basename $0)

ALARM=0
CONFIG_LOADED=0
COMMAND_FOUND=0
NOTIFY=1

# keep original language to normalize script output
LANG=C

# ---------------------------------------- helpers

ESC_GRA="\e[90m"
ESC_RED="\e[91m"
ESC_GRE="\e[92m"
ESC_YEL="\e[93m"
ESC_BLU="\e[94m"
ESC_MAG="\e[95m"
ESC_CYA="\e[96m"
ESC_WHI="\e[97m"
ESC_RST="\e[0m"
ESC_BOLD="\e[1m"

IS_VM=""

# ---------------------------------------- check return
CHECK_SUCCESS=0
CHECK_WARNING=1
CHECK_FAILED=2
CHECK_IGNORED=253
CHECK_IMPOSSIBLE=254
CHECK_DISABLED=255

display_return_code() {
    case $1 in
        $CHECK_SUCCESS)
            echo "🟢 success"
            ;;
        $CHECK_WARNING)
            echo "🟠 warning"
            ;;
        $CHECK_FAILED)
            echo "🔴 failed"
            ;;
        $CHECK_IGNORED)
            echo "❌ ignored"
            ;;
        $CHECK_IMPOSSIBLE)
            echo "🔥 impossible"
            ;;
        $CHECK_DISABLED)
            echo "🚫 disabled"
            ;;
        *)
            echo "$1 unknown"
            ;;
    esac
}

# purpose is to detect if we are on a virtual machine (some tests are not relevant on VM)
detect_virt() {

    if [ -z $IS_VM ]
    then
        if which systemd-detect-virt >/dev/null
        then
            systemd-detect-virt -v -q
            IS_VM=$?
        else

            grep -q -E -i '^(qemu|kvm|zvm|vmware|microsoft|oracle|powervm|xen|bochs|uml|parallels|bhyve|qnx|acrn)' /sys/class/dmi/id/board_vendor
            IS_VM=$?
        fi
    fi

    return $IS_VM
}


urlencode() {
    # urlencode <string>
    local old_lc_collate=$LC_COLLATE
    LC_COLLATE="C"

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *)               printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

min_to_human_display() {

   local expires=$1
   # FIXME could take unit from (min or sec)

   local days=$(( $expires/(60*24) ))
   expires=$(( $expires - ($days*60*24) ))

   local hours=$(( $expires/60 ))
   expires=$(( $expires - ($hours*60) ))

   local answer=""
   if [ $days -gt 0 ]
   then
           answer="${days}d"
   fi

   if [ $hours -gt 0 ]
   then
           answer="${answer}${hours}h"
   fi

   if [ $expires -gt 0 ]
   then
           answer="${answer}${expires}m"
   fi

   echo $answer
}

byte_to_human_display() {
    local byte=$1
    local unit=$2

    local rest=0

    while [ $byte -gt 1014 ]
    do
        rest=$(( $byte % 1024 ))
        byte=$(( $byte / 1014 ))

        case $unit in
            B)
                unit="kB"
                ;;
            kB)
                unit="MB"
                ;;
            MB)
                unit="GB"
                ;;
            GB)
                unit="TB"
                ;;
            TB)
                unit="PB"
                break
                ;;
            *)
                echo "byte_to_human_display: unit $unit not recognized" >&2
                ;;
        esac

    done

    #rest=$(( $prev - $byte * 1014))

    if [ $rest -eq 0 ]
    then
        echo $byte $unit
    else
        printf "%d.%03d %s" $byte $rest $unit
    fi
}

# return cached value or default one.
_cache() {
    local CACHE="$1"
    local TTL="$2"
    local DEFAULT=$3
    local CURRENT=$4

    local VALUE=$DEFAULT
    local WRITE=1

    if [ -e "$CACHE" ]
    then
        local NOW=$(date +'%s')
        local CTIME=$(stat -c '%Y' "$CACHE")

        if [ $(( $NOW - $CTIME )) -lt $(( 3600 * $TTL )) ]
        then
            VALUE=$(cat "$CACHE")
            # cache ok, do not alter it
            WRITE=0
        else
            # cache expired, but got a value
            VALUE=$(cat "$CACHE")
            if [ $VALUE -eq $CURRENT ]
            then
                # value remains the same, no need to alter it
                WRITE=0
            fi
        fi
    fi

    if [ $WRITE -eq 1 ]
    then
        # Write cache
        echo $CURRENT > "$CACHE"
    fi

    echo $VALUE
}

volatile_cache() {
    _cache "$HT_RUNDIR/$1" "$2" "$3" "$4"
}

persistent_cache() {
    _cache "$VARDIR/$1" "$2" "$3" "$4"
}


contains() {
    # usage contains "lookup" "array"
    local lookup=$1

    # match all case

    shift;
    for element in "$@"
    do
        [ "$element" == "*"       ] && return 0 # considers that '*' match all
        [ "$element" == "$lookup" ] && return 0
       done
    return 1
}

max() {
    if [ $1 -gt $2 ]
    then
        echo $1
    else
        echo $2
    fi
}

explain() {
    echo -e "${ESC_WHI}$*" $ESC_RST
}

abort() {
    echo -e "${ESC_MAG}$*" $ESC_RST
}

alert() {
    ALARM=1
    logger -p user.crit -t "$SCRIPTNAME" -- "$*"
    echo -e "${ESC_RED}ALERT:" "$*" $ESC_RST
    echo -e "$*" >>$REPORT

    return $CHECK_FAILED
}

silent_alert() {
    echo -e "${ESC_YEL}SILENT ALERT:" "$*" $ESC_RST
    echo -e "$*" | sed 's/^/@silent /' >>$REPORT

    return $CHECK_WARNING
}

to_boolean() {

    # get uppercase
    case "${1^^}" in
        YES | TRUE | 1)
            return 0
            ;;

        NO | FALSE | 0 | " " | "" )
            return 1
            ;;

        *)
            echo "Warning value $1 is no a boolean" >&2
            return 2
            ;;
    esac
}

notify() {

    if [ $NOTIFY -eq 0 ]
    then
        echo "Silent mode do not notify: $*"
        return 0
    fi

    local message=$( urlencode "$*")

    if [ -z "$WEBHOOK" ]
    then
        alert "WEBHOOK not defined, cannot notify"
        return 1
    fi

    if ! which curl >/dev/null
    then

        # fallback to curl
        if which wget >/dev/null
        then
            # fallback to wget
            wget -q -O /dev/null "${WEBHOOK}${message}"
        else
            # neither curl nor wget found, request user to install at least curl
            echo "I will really appreciate that you 'apt install curl' to call your webhook" &>2
            return 1
        fi
    fi

    CODE=$(curl -s -q -w '%{http_code}' -o /dev/null "${WEBHOOK}${message}")

    if [ "$CODE" != "200" ]
    then
        echo "warn: notify webhook failed: $CODE"
        return 1
    fi

    return 0
}

load_config() {

    if ! [ -e $CONFIG ]
    then
        echo "configuration $CONFIG not found"
        return 1
    fi

    if [ "$(stat -c '%u %g' -L $CONFIG)" != "0 0" ]
    then
        echo "SECURITY: $CONFIG must be owner by uid: root group: root"
        exit 1
    fi

    #expected return: -rw-r--r--
    if echo "$(stat -c '%A' -L $CONFIG)" | grep -q '^........w.$'
    then
        echo "SECURITY: $CONFIG cannot be writable by anybody"
        exit 1
    fi

    # load config (XXX: dangerous , can execute arbitrary command)
    source $CONFIG

    CONFIG_LOADED=1
}

lock() {
    exec 200>$LOCK
    if ! flock -n 200
    then
        echo locked

        local NOW=$(date +'%s')
        local BIRTHTIME=$(stat -c '%W' $LOCK)
        local AGE=$[ ( $NOW - $BIRTHTIME ) / 3600]
        if [ $AGE -ge 1 ]
       then
           MESSAGE="Alert 'host-tools' is locked on *$HOSTNAME* since too long time: $AGE hour(s)"
            echo "$MESSAGE" 1>&2
            notify "⚠️  $MESSAGE"
       fi

        return 1
    fi

    # will clean up lock at exit
    trap unlock EXIT

}

unlock() {

    # remove  auto cleanup
    trap - EXIT

    rm -f $LOCK

    # close filedescriptor 200
    exec 200>&-

}

# will return all HDD/SSD: sda sdb ...
find_disks() {

    # can be sd or mmc
    local LOOKUP=$1
    if [ -z $LOOKUP ]
    then
        LOOKUP="sd"
    fi

        local DISKSMAJORS=""

        while read -r MAJOR TYPE
        do
                if [ "$TYPE" == "$LOOKUP" ];
                then
                        if [ -z "$DISKSMAJORS" ]
                        then
                                DISKSMAJORS="$MAJOR"
                        else
                                DISKSMAJORS="$DISKSMAJORS|$MAJOR"
                        fi
                fi
        done </proc/devices

    local LASTLABEL=""

    # keep only disks (minor are multiple of 16)
    while read -r MAJOR MINOR LABEL STATS
    do
        if [[ "$MAJOR" =~ ^($DISKSMAJORS)$ ]] && [ $(( $MINOR % 16 )) -eq 0 ]
        then

            # check that label does not start with previous match (means already found)
            if [ "$LOOKUP" == "mmc" ] && [ ! -z $LASTLABEL ] && [[ "$LABEL" =~ ^($LASTLABEL) ]]
            then
               continue
            fi
            LASTLABEL="$LABEL"
            echo $LABEL
        fi

    done </proc/diskstats
}

# ---------------------------------------- checks

declare -A MODULE_DESCRIPTION
declare -A MODULE_ENABLED
declare -A MODULE_INIT

load_module() {

    # load test
    local FILE=$1
    local PREFIX=$2
    local FUNC

    local MODULE=$(basename $MODULE)
    source $FILE

    if [ -z "$DESCRIPTION" ]
    then
        echo "module $MODULE: missing DESCRIPTION variable"
    fi
    MODULE_DESCRIPTION[$MODULE]="$DESCRIPTION"

    for FUNC in run
    do
        if ! declare -f $FUNC >/dev/null
        then
            echo "module $MODULE: Warning function $FUNC not found"
            continue
        fi

        # rename function (namespace it)
        #TARGET eval "${MODULE}_${FUNC}() $(declare -f ${FUNC} | tail -n +2)"
        eval "${PREFIX}_${MODULE}() $(declare -f ${FUNC} | tail -n +2)"

        # remove initial name
        unset -f $FUNC
    done

    # initialise module
    if ! declare -f init >/dev/null
    then
        echo "module $MODULE: is missing init() function"
        exit 1
    fi

    #MODULE_INIT[$MODULE]=$(init)
    init
    MODULE_ENABLED[$MODULE]=$?
    unset -f init

    # DEBUG echo "$MODULE loaded: ${DESCRIPTION}"
    unset -v DESCRIPTION
}


# ---------------------------------------- commands

cmd_check_list() {
    # execute all check_* functions
    for CHECK in $(compgen -A function | grep ^check_ | sort)
    do
        MODULE=${CHECK#check_}
        printf '\t%30s\t%d\t%s\n' "$CHECK" "${MODULE_ENABLED[$MODULE]}" "${MODULE_DESCRIPTION[$MODULE]}"
        #if [ ${MODULE_ENABLED[$MODULE]} -ne 0 ]
        #then
        #    printf '\t%30s\t%s\n' "" "${MODULE_INIT[$MODULE]}"
        #fi
    done
}

cmd_full_check() {

    lock || return 1

    test -e $REPORT && mv $REPORT $REPORT.prev

    local TOTAL=$(compgen -A function | grep ^check_ | wc -l)
    local COUNT=0
    local POS

    # execute all check_* functions
    for CHECK in $(compgen -A function | grep ^check_ | sort)
    do
        COUNT=$(( $COUNT + 1 ))
        POS=$(printf '%02d/%02d' $COUNT $TOTAL)
        echo -e "$ESC_CYA[$POS] +++ $CHECK...$ESC_RST"
        $CHECK
        echo -e "$ESC_CYA[$POS] --- $CHECK: $(display_return_code $?)$ESC_RST"
        echo
    done

    if [ "$ALARM" != "0" ]
    then
        MESSAGE="please check *$HOSTNAME*:"$'\n'"$(grep -v '^@silent' $REPORT | sed 's/^/  `/; s/$/`/;')"
        notify "⚠️  $MESSAGE"

        echo
        echo -e "⚠️  ${ESC_RED}please check $HOSTNAME, got $(grep -v '^@silent' $REPORT | wc -l) issue(s)${ESC_RST}"

    else
        logger -p user.info -t $SCRIPTNAME -- "full check success"

        echo
        echo -e "✅ ${ESC_GRE}full check success${ESC_RST}"

        echo "full-check success at "$(date) >>$REPORT

        if [ -f $REPORT.prev ]
        then
            if ! ( tail -n 1 $REPORT.prev | grep -q "full-check success" )
            then
                # previous test was a failure, notify that everthing is back to normal
                notify "✅ *$HOSTNAME* full-check is now successful"
            fi
        fi
    fi

    unlock

}

# FIXME: depends on a variable from a module, should be moved into this module
cmd_install_packages() {

    lock || return 1

    if [ ${#MANDATORY_PACKAGES[@]} == 0 ]
    then
       abort "no mandatory package in config"
       unlock
       return 1
    fi

    if ! which apt-get >/dev/null
    then
       echo "apt-get not found, I only know debian systems [ignoring command]"
       unlock
       return 1
    fi

    apt-get install "${MANDATORY_PACKAGES[@]}"

    unlock
}

cmd_notify_alive() {
    notify "⏰ *${HOSTNAME}* is alive"
}

cmd_notify_boot() {
    notify "💫 *${HOSTNAME}* just boot, please check it"
}

cmd_notify() {
    notify "*${HOSTNAME}*: $*"
}

cmd_last_report() {

    # FIXME: 'd rather use a temp file while building new report

    echo
    if [ ! -e $REPORT ]
    then
        echo "please run '$SCRIPTNAME full-check' to have report"
        return
    fi

    #if ! tty >/dev/null 2>/dev/null
    #then
    #    cat $REPORT
    #    echo
    #    return
    #fi

    TAB="    "

    REPORT_DATE="$(stat -c '%y' $REPORT)"
    echo -e "${ESC_BOLD}$SCRIPTNAME${ESC_RST} report at $REPORT_DATE:"
    while read -r LINE
    do
        if [[ $LINE =~ ^full-check\ success ]]
        then
            echo -e "$TAB✅ ${ESC_GRE}full check success${ESC_RST}"
            continue
        fi

        if [[ $LINE =~ ^@silent ]]
        then
            echo -e "$TAB🔕 ${ESC_YEL}${LINE#@silent }${ESC_RST}"
        else
            echo -e "$TAB❗ ${ESC_RED}${ESC_BOLD}${LINE}${ESC_RST}"
        fi
    done < $REPORT
    echo
}

cmd_backup_etc() {

    if ! which dpkg >/dev/null
    then
        alert "only know debian for now"
        return 1
    fi

    # get path from config
    local DEST=$BACKUP_PATH

    # overwrite path from parameter
    [ ! -z "$1" ] && DEST=$1

    if [ -z "$DEST" ]
    then
        echo please specify a destination
        return 1
    fi

    echo backup config and package list only of $HOSTNAME to $DEST

    local current=$(pwd)
    cd /

    if ! touch $DEST/.start-backup
    then
        echo cannot write in $DEST
        return 1
    fi
    rm -f $DEST/.start-backup

    # backup /etc
    tar -cf $DEST/etc.tgz etc

    # get packages selections
    # XXX: dpkg or "apt list --installed ?"
    dpkg --get-selections >$DEST/dpkg.list

    cd $current
}

cmd_help() {
    cat <<EOF
usage $SCRIPTNAME [options] <command>

options:
    -c|--config <file>    specify config file (default: $CONFIG)
    -r|--report <file>    specify report file (default: $REPORT)
    -s|--silent           mute notifications

command:

    check-list            list check available
    <check...>            call directly a check (list available on check-list)
    full-check            perform a full host check (use it in cron for periodic check)
    last-report           dump last report from full-check command (ex: use in in /etc/update-motd.d)

    install-packages      install mandatory packages
    backup-etc [<path>]   backup /etc and package list to <path> destination

    notify-alive          notify host is alive (ex: use it in cron for periodic notification)
    notify-boot           notify host just boot (ex: put it in /etc/rc.local)
    notify <message>      send a custom notification

    help                  this help

EOF
}


# ------------------------------------------------------ main

# Important: modules must be init before Config
for DIR in  $BASEDIR/lib/check $BASEDIR/lib/host-tools/check
do
    test -d $DIR || continue
    for MODULE in $DIR/*
    do
        load_module $MODULE check
    done
done

if [ "$UID" != "0" ]
then
    echo "must be runned has root"
    exit 1
fi

NO_COMMAND=1

# read parameters
while [ $# -gt 0 ]
do
    case $1 in
        -c|--config)
            shift
            CONFIG=$1
            echo CONFIG=$CONFIG;
            shift
            ;;

        -r|--report)
            shift
            REPORT=$1
            echo REPORT=$CONFIG;
            shift
            ;;

        -s|--silent)
            shift
            NOTIFY=0
            ;;

        *)
            NO_COMMAND=0

            # no more parameter
            [ $CONFIG_LOADED -eq 0 ] && load_config

            if [[ $1 =~ ^check_ ]]
            then
                # check if $1 is a command (prepend cmd_ and replace - by _)
                COMMAND=$1
            else
                # check if $1 is a command (prepend cmd_ and replace - by _)
                COMMAND=cmd_${1//[-]/_}
            fi

            if ( declare -F "$COMMAND" >/dev/null)
            then
                # command exists, execute it giving next parameters
                COMMAND_FOUND=1
                shift
                $COMMAND "$@"
                ANSWER=$?
                if [[ $COMMAND =~ ^check ]]
                then
                    echo return code: $ANSWER
                fi
            else
                echo "command $1 not recognized"
            fi

            # end loop
            break
    esac
done

if [ $NO_COMMAND -eq 1 ]
then
    # shortcut to full-check
    [ $CONFIG_LOADED -eq 0 ] && load_config
    load_config
    cmd_full_check
    exit $ALARM
fi


if [ $COMMAND_FOUND -eq 0 ]
then
    echo "bad syntax"
    cmd_help
    exit 1
fi

exit $ALARM

