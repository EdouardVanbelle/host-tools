#!/bin/bash

# XXX: pending development, use it at your risks


usage() {
	SCRIPT=$(basename $0)
	echo usage: $SCRIPT '<root btrfs filesystem>'
	exit 1
}

init() {

	# get canonical path
	TOPLEVEL=$(readlink -f $TOPLEVEL)

	#test -e $TOPLEVEL || mkdir $TOPLEVEL
	if ! mountpoint $TOPLEVEL >/dev/null
	then
		echo $TOPLEVEL is not a mountpoint
		exit 1
		#mount $SOURCE $TOPLEVEL -o rw,relatime,compress=lzo,ssd,space_cache,subvolid=0
	fi

	if ! btrfs filesystem show $TOPLEVEL >/dev/null 2>/dev/null
	then
		echo $TOPLEVEL is neither mounted or nor a btrfs filesystem
		exit 1
	fi

	if ! [ -d $TOPLEVEL/snapshots ]
	then
		echo $TOPLEVEL does not have snapshots, is this mount point connected to top level subvolume ?
		exit 1
	fi

}

list_root_volumes() {
        # keep only top level subvolumes (which does not contains /)
        btrfs subvolume list $TOPLEVEL | awk '{ if ($NF !~ /\// ) { print $NF; } }'
}

list_snapshots() {

	local LOOKUP=$1

	if [ -z "$LOOKUP" ]
	then
		btrfs subvolume list -s $TOPLEVEL | awk '{ print $NF; }' | sed 's!^snapshots/!!g;'
	else
		btrfs subvolume list -s $TOPLEVEL | awk '{ if ( $NF ~ "^snapshots/'$LOOKUP'" ) { print $NF; } }' | sed 's!^snapshots/!!g;'
	fi

}


# snapshot 
create_snapshot() {

	local TAG="$1"

	if [ -z "$TAG" ]
	then
		TAG="$NOW"
	fi

	test -d $TOPLEVEL/snapshots/$TAG || mkdir -p $TOPLEVEL/snapshots/$TAG

	for VOLUMES in $(list_root_volumes)
	do
		if [ -d $TOPLEVEL/snapshots/$TAG/$VOLUMES ]
		then
			echo $TOPLEVEL/snapshots/$TAG/$VOLUMES already exists
		else
			btrfs subvolume snapshot -r $TOPLEVEL/$VOLUMES $TOPLEVEL/snapshots/$TAG/$VOLUMES
		fi
	done
}

delete_snapshot() {

	local TAG="$1"

	for SNAP in $(list_snapshots $TAG)
	do
		btrfs subvolume delete "$TOPLEVEL/snapshots/$SNAP"
	done
	rmdir "$TOPLEVEL/snapshots/$TAG"
	return $?
}

move_snapshot() {
	local FROM="$1"
	local TO="$2"

	mv "$TOPLEVEL/snapshots/$FROM" "$TOPLEVEL/snapshots/$TO"
	return $?
}

get_snapshot_by_age() {
	local DURATION=$1
	local SUBPATH=$2
	test -d $TOPLEVEL/snapshots/$SUBPATH || return 1
	find $TOPLEVEL/snapshots/$SUBPATH -mindepth 1 -maxdepth 1 -type d -cmin ${DURATION} -printf '%f\n' | sort
}

get_last_snapshot() {
	local LAST=$(ls --sort=time $TOPLEVEL/snapshots/ | head -n 1)
	echo $LAST
}

# ------------------------------------ main script

TOPLEVEL="$1"
if [ -z "$TOPLEVEL" ]
then
	usage
fi

NOW=$(date +'%Y-%m-%d.%Hh%M')

OFS=" "


init

#TODO: put this in configuration file ?
HOURLY_PERIOD=60
HOURLY_COUNT=2
DAILY_PERIOD=$((60*24))
DAILY_COUNT=2
WEEKLY_PERIOD=$((60*24*7))
WEEKLY_COUNT=3

if [ -z "$(get_snapshot_by_age -$HOURLY_PERIOD hourly)" ]
then
	echo no hourly snapshot, creating one
	create_snapshot hourly/$NOW
fi

# + 1/2 period to avoid tangent problems
for LABEL in $(get_snapshot_by_age +$(($HOURLY_PERIOD*$HOURLY_COUNT+$HOURLY_PERIOD/2)) hourly)
do

	if [ -z "$(get_snapshot_by_age -$DAILY_PERIOD daily)" ]
	then
		echo no daily snapshot, moving old hourly/$LABEL
		move_snapshot hourly/$LABEL daily/$LABEL
	else
		# should not occurs
		echo remove old snapshot: hourly/$LABEL
		delete_snapshot hourly/$LABEL
	fi
done

# + 1/2 period to avoid tangent problems
for LABEL in $(get_snapshot_by_age +$(($DAILY_PERIOD*$DAILY_COUNT+$DAILY_PERIOD/2)) daily)
do

	if [ -z "$(get_snapshot_by_age -$WEEKLY_PERIOD weekly)" ]
	then
		echo no weekly snapshot, moving old daily/$LABEL
		move_snapshot daily/$LABEL weekly/$LABEL
	else
		# should not occurs
		echo found old snapshot: daily/$LABEL
		delete_snapshot daily/$LABEL
	fi
done

# + 1/2 period to avoid tangent problems
for LABEL in $(get_snapshot_by_age +$(($WEEKLY_PERIOD*$WEEKLY_COUNT+$WEEKLY_PERIOD/2)) weekly)
do
	echo found old snapshot: weekly/$LABEL
	delete_snapshot weekly/$LABEL
done

echo situation
list_snapshots

