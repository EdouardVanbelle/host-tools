#!/bin/bash

# XXX: pending development, use it at your risks

MAX_SNAPSHOT=30
SNAPSHOT_PERIOD=7

SOURCE=/dev/sdb3
TOPLEVEL=/mnt/system-top-level
NOW=$(date '+%F')

OFS=" "

init() {

	test -e $TOPLEVEL || mkdir $TOPLEVEL

	if ! mountpoint $TOPLEVEL >/dev/null
	then
		mount $SOURCE $TOPLEVEL -o rw,relatime,compress=lzo,ssd,space_cache,subvolid=0
	fi

}

list_root_volumes() {
	# keep only @... subvolumes (like @, @home, ...)
	btrfs subvolume list $TOPLEVEL | awk '{ if ($NF ~ /^@/ ) { print $NF; } }'
}

list_snapshots() {

	local LOOKUP=$1

	if [ -z "$LOOKUP" ]
	then
		btrfs subvolume list -s $TOPLEVEL | awk '{ print $NF; }'
	else
		btrfs subvolume list -s $TOPLEVEL | awk '{ if ( $NF ~ "^'$LOOKUP'" ) { print $NF; } }'
	fi

}


# snapshot 
snapshot() {
	test -d $TOPLEVEL/snapshots/$NOW || mkdir -p $TOPLEVEL/snapshots/$NOW

	for VOLUMES in $(list_root_volumes)
	do
		if [ -d $TOPLEVEL/snapshots/$NOW/$VOLUMES ]
		then
			echo $TOPLEVEL/snapshots/$NOW/$VOLUMES already exists
		else
			btrfs subvolume snapshot -r $TOPLEVEL/$VOLUMES $TOPLEVEL/snapshots/$NOW/$VOLUMES
		fi
	done
}

recent_snapshot() {
	find $TOPLEVEL/snapshots/ -mindepth 1 -maxdepth 1 -type d -ctime -${SNAPSHOT_PERIOD} -printf '%f\n'
}

has_old_snapshots() {
	find $TOPLEVEL/snapshots/ -mindepth 1 -maxdepth 1 -type d -ctime +${MAX_SNAPSHOT} -printf '%f\n'
}

get_last_snapshot() {
	local LAST=$(ls --sort=time $TOPLEVEL/snapshots/ | head -n 1)
	echo $LAST
}



backup() {


	local SNAPSHOT=$1

	if [ -z "$SNAPSHOT" ]
	then
		SNAPSHOT=$NOW
	fi

	echo do a backup with snapshot $SNAPSHOT
	for SNAP in $(list_snapshots snapshots/$SNAPSHOT)
	do
		case $SNAP in
			snapshots/*/@home)
				# backup last snapshot (XXX: should use btrfs send to minimize changes)
				# TODO: btrfs send /mnt/system-top-level/snapshots/2020-06-26/@ | btrfs receive /mnt/test/snapshots/
				for USERHOME in $(ls $TOPLEVEL/$SNAP)
				do
					# security, should not occurs with a btrfs volume
					[ "$USERHOME" == "lost+found" ] && continue

					echo backuping @home/$USERHOME
					rsync -ahx --delete --exclude=/.cache/ $TOPLEVEL/$SNAP/$USERHOME/ /mnt/backup/home/$USERHOME/
				done
				;;

			snapshots/*/@)
				echo "backuping /"
				rsync -ahx --delete --exclude=/boot/ $TOPLEVEL/$SNAP/ /mnt/backup/root/

				if mountpoint /boot >/dev/null
				then
					echo "backuping /boot"
					rsync -ahx --delete  /boot/  /mnt/backup/root/boot/
				fi
				;;

			*)
				echo $SNAP snapshot not recognized
				;;
		esac

	done

}

restore() {
	umount $TOPLEVEL
}

init
#list_snapshots

RECENT=$(recent_snapshot | tr '\n' ' ' | sed 's/ $//' )
if [ -z "$RECENT" ]
then
	echo "do not have recent snapshot, snapshoting..."
	snapshot
else
	echo "system has recent (< ${SNAPSHOT_PERIOD} days) snapshots ($RECENT), no need to snapshot"
fi
echo

OLDSNAP=$(has_old_snapshots | tr '\n' ' ' | sed 's/ $//' )
if [ -z "$OLDSNAP" ]
then
	echo "don't have old snapshot"
else
	echo "system has old (> ${MAX_SNAPSHOT} days) snapshots ($OLDSNAP)"
	for OLD in $OLDSNAP
	do
		echo $OLD
		for SNAP in $(list_snapshots snapshots/$OLD)
		do
			echo should delete $SNAP
			#btrfs subvolume delete $TOPLEVEL/$SNAP
		done
		rmdir $TOPLEVEL/snapshots/$OLD
	done
fi
echo

LAST=$(get_last_snapshot)
echo last known snapshot: $LAST
list_snapshots snapshots/$LAST
echo

backup $LAST
